node('Slave') {
    def curStage = 'Start'
    def emailList = EMAIL_NOTIFICATION_LIST ?: 'thomas.ramirez@osi.ca.gov'
    def branch = env.BRANCH_NAME ?: 'master'
 
    ws {
        try {
            checkout scm
            echo "${IMAGE_TAG}"

            withEnv(["AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}", 
                "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}", 
                "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}",
                "DOCKER_EMAIL=${DOCKER_EMAIL}",
                "DOCKER_IMAGE=${IMAGE_TAG}",
                "ANSIBLE_HOST_KEY_CHECKING=False"
                ]) {

                withCredentials([
                    [$class: 'FileBinding', credentialsId: 'AWS_SSH_KEY', variable: 'KEY_FILE'],
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker_credentials',
                                usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD']
                ]) {
                    stage('Install dependencies') {
                        stage = 'Install dependencies'
                        sh 'ansible-galaxy install -p ./intake/roles dochang.docker'
                        sh 'ansible-galaxy install -p ./shared/roles Datadog.datadog'
                    }
                    stage('Write variable files') {
                        stage = 'Write variable files'
                        writeFile file: './hosts', text: HOSTS
                        writeFile file: './group_vars/all', text: GROUP_VARS
                    }

                    stage('Deploy') {
                        stage = 'Deploy'
                        sh 'ansible-playbook -u ec2-user -i ./hosts --key-file=$KEY_FILE --skip-tags=local_dependencies --extra-vars="intake_image_tag=$DOCKER_IMAGE username=$DOCKER_USER email=$DOCKER_EMAIL password=$DOCKER_PASSWORD" ./intake/config-docker-intake-node.yml'
                    }
                }
            }
        }
        catch(e) {
            def tagOnly = IMAGE_TAG.substring(IMAGE_TAG.lastIndexOf(":"))
            if(tagOnly == ':latest') {
                emailext (
                    to: emailList,
                    subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' in stage ${curStage}",
                    body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' in stage '${curStage}' for branch '${branch}':</p>
                        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
                )
//                slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' in stage '${curStage}' for branch '${branch}' (${env.BUILD_URL})")
            }
            throw e
        }
        finally {
            stage('Clean') {
                sh 'rm -rf .* * 2>/dev/null || true'
            }
        }
    }
}
